1.
Посчитайте, сколько компаний закрылось.
Выполнение:

SELECT COUNT(name)
FROM company
WHERE status LIKE '%closed%';

2.
Отобразите количество привлечённых средств для новостных компаний США. Используйте данные из таблицы company. Отсортируйте таблицу по убыванию значений в поле funding_total .
Выполнение:

SELECT funding_total
FROM company
WHERE country_code LIKE '%USA%'
  AND category_code LIKE '%news%'
ORDER BY funding_total DESC;

3.
Найдите общую сумму сделок по покупке одних компаний другими в долларах. Отберите сделки, которые осуществлялись только за наличные с 2011 по 2013 год включительно.
Выполнение:

SELECT SUM(price_amount)
FROM acquisition
WHERE (term_code LIKE '%cash')
  AND (EXTRACT(YEAR FROM acquired_at) BETWEEN 2011 AND 2013);

4.
Отобразите имя, фамилию и названия аккаунтов людей в твиттере, у которых названия аккаунтов начинаются на 'Silver'.
Выполнение:

SELECT first_name,
       last_name,
       twitter_username
FROM people
WHERE twitter_username LIKE 'Silver%';

5.
Выведите на экран всю информацию о людях, у которых названия аккаунтов в твиттере содержат подстроку 'money', а фамилия начинается на 'K'.
Выполнение:

SELECT *
FROM people
WHERE twitter_username LIKE '%money%'
  AND last_name LIKE 'K%';

6.
Для каждой страны отобразите общую сумму привлечённых инвестиций, которые получили компании, зарегистрированные в этой стране. Страну, в которой зарегистрирована компания, можно определить по коду страны. Отсортируйте данные по убыванию суммы.
Выполнение:

SELECT country_code,
       SUM(funding_total) AS funding_total
FROM company
GROUP BY country_code
ORDER BY funding_total DESC;

7.
Составьте таблицу, в которую войдёт дата проведения раунда, а также минимальное и максимальное значения суммы инвестиций, привлечённых в эту дату.
Оставьте в итоговой таблице только те записи, в которых минимальное значение суммы инвестиций не равно нулю и не равно максимальному значению.
Выполнение:

SELECT CAST(funded_at AS date),
       MIN(raised_amount),
       MAX(raised_amount)
FROM funding_round
GROUP BY CAST(funded_at AS date)
HAVING MIN(raised_amount) <> 0
   AND MIN(raised_amount) <> MAX(raised_amount);

8.
Создайте поле с категориями:
Для фондов, которые инвестируют в 100 и более компаний, назначьте категорию high_activity.
Для фондов, которые инвестируют в 20 и более компаний до 100, назначьте категорию middle_activity.
Если количество инвестируемых компаний фонда не достигает 20, назначьте категорию low_activity.
Отобразите все поля таблицы fund и новое поле с категориями.
Выполнение:

SELECT *,
       CASE
           WHEN invested_companies > 100 THEN 'high_activity'
           WHEN invested_companies >=20 AND invested_companies < 100 THEN 'middle_activity'
           WHEN invested_companies < 20 THEN 'low_activity'
        END
FROM fund;

9.
Для каждой из категорий, назначенных в предыдущем задании, посчитайте округлённое до ближайшего целого числа среднее количество инвестиционных раундов, в которых фонд принимал участие. Выведите на экран категории и среднее число инвестиционных раундов. Отсортируйте таблицу по возрастанию среднего.
Выполнение:

SELECT
       CASE
           WHEN invested_companies>=100 THEN 'high_activity'
           WHEN invested_companies>=20 THEN 'middle_activity'
           ELSE 'low_activity'
       END AS activity,
       ROUND(AVG(investment_rounds)) AS avg_rounds_count
FROM fund
GROUP BY activity
ORDER BY avg_rounds_count;

10.
Проанализируйте, в каких странах находятся фонды, которые чаще всего инвестируют в стартапы.
Для каждой страны посчитайте минимальное, максимальное и среднее число компаний, в которые инвестировали фонды этой страны, основанные с 2010 по 2012 год включительно. Исключите страны с фондами, у которых минимальное число компаний, получивших инвестиции, равно нулю. Выгрузите десять самых активных стран-инвесторов.
Отсортируйте таблицу по среднему количеству компаний от большего к меньшему, а затем по коду страны в лексикографическом порядке.
Выполнение:

SELECT f.country_code,
       MIN(c.count_invested_companies),
       MAX(c.count_invested_companies),
       AVG(c.count_invested_companies)
FROM fund AS f
INNER JOIN 
(SELECT name,
       SUM(invested_companies) AS count_invested_companies
FROM fund
WHERE EXTRACT(YEAR FROM CAST(founded_at AS date)) BETWEEN 2010 AND 2012
GROUP BY name
ORDER BY count_invested_companies DESC) AS c ON c.name=f.name
GROUP BY f.country_code
HAVING MIN(count_invested_companies) <> 0
ORDER BY AVG(count_invested_companies) DESC
LIMIT 10;

11.
Отобразите имя и фамилию всех сотрудников стартапов. Добавьте поле с названием учебного заведения, которое окончил сотрудник, если эта информация известна.
Выполнение:

SELECT p.first_name,
       p.last_name,
       e.instituition
FROM people AS p
LEFT JOIN education AS e ON p.id=e.person_id;

12.
Для каждой компании найдите количество учебных заведений, которые окончили её сотрудники. Выведите название компании и число уникальных названий учебных заведений. Составьте топ-5 компаний по количеству университетов.
Выполнение:

SELECT c.name,
       count_inst.count
FROM company AS c
RIGHT JOIN
(SELECT COUNT(DISTINCT instituition),
       company_id
FROM
(SELECT p.first_name,
       p.last_name,
       e.instituition,
       p.id,
       p.company_id
FROM people AS p
LEFT JOIN education AS e ON p.id=e.person_id) AS edu
GROUP BY company_id) AS count_inst ON c.id=count_inst.company_id
WHERE c.name IS NOT NULL
ORDER BY count_inst.count DESC
LIMIT 5;

13.
Составьте список с уникальными названиями закрытых компаний, для которых первый раунд финансирования оказался последним.
Выполнение:

SELECT DISTINCT name
FROM company
WHERE status LIKE '%closed%'
  AND id IN
(SELECT company_id
FROM funding_round
WHERE is_first_round = 1
  AND is_last_round = 1
GROUP BY company_id);

14.
Составьте список уникальных номеров сотрудников, которые работают в компаниях, отобранных в предыдущем задании.
Выполнение:

SELECT DISTINCT p.id
FROM people AS p
INNER JOIN
(SELECT DISTINCT name,
       id
FROM company
WHERE status LIKE '%closed%'
  AND id IN
(SELECT company_id
FROM funding_round
WHERE is_first_round = 1
  AND is_last_round = 1
GROUP BY company_id)) AS c ON p.company_id=c.id;

15.
Составьте таблицу, куда войдут уникальные пары с номерами сотрудников из предыдущей задачи и учебным заведением, которое окончил сотрудник.
Выполнение:

WITH

c AS (SELECT DISTINCT name,
       id
FROM company
WHERE status LIKE '%closed%'
  AND id IN
(SELECT company_id
FROM funding_round
WHERE is_first_round = 1
  AND is_last_round = 1
GROUP BY company_id))

SELECT DISTINCT p.id,
       e.instituition
FROM people AS p
INNER JOIN c ON p.company_id=c.id
INNER JOIN education AS e ON p.id=e.person_id;

16.
Посчитайте количество учебных заведений для каждого сотрудника из предыдущего задания. При подсчёте учитывайте, что некоторые сотрудники могли окончить одно и то же заведение дважды.
Выполнение:

WITH

c AS (SELECT DISTINCT name,
       id
FROM company
WHERE status LIKE '%closed%'
  AND id IN
(SELECT company_id
FROM funding_round
WHERE is_first_round = 1
  AND is_last_round = 1
GROUP BY company_id))

SELECT p.id,
       COUNT(e.instituition)
FROM people AS p
INNER JOIN c ON p.company_id=c.id
INNER JOIN education AS e ON p.id=e.person_id
GROUP BY p.id;

17.
Дополните предыдущий запрос и выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники разных компаний. Нужно вывести только одну запись, группировка здесь не понадобится.
Выполнение:

WITH

c AS (SELECT DISTINCT name,
       id
FROM company
WHERE status LIKE '%closed%'
  AND id IN
(SELECT company_id
FROM funding_round
WHERE is_first_round = 1
  AND is_last_round = 1
GROUP BY company_id))

SELECT AVG(av.count_inst)
FROM
(SELECT p.id,
       COUNT(e.instituition) AS count_inst
FROM people AS p
INNER JOIN c ON p.company_id=c.id
INNER JOIN education AS e ON p.id=e.person_id
GROUP BY p.id) AS av;

18.
Напишите похожий запрос: выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники Facebook*.
*(сервис, запрещённый на территории РФ)
Выполнение:

WITH

p_id AS (SELECT DISTINCT id
FROM people
WHERE company_id = (SELECT id
FROM company
WHERE name LIKE 'Facebook'))
         
SELECT AVG(c.count_inst)
FROM
(SELECT p_id.id,
       COUNT(e.instituition) AS count_inst
FROM p_id
INNER JOIN education AS e ON p_id.id=e.person_id
GROUP BY p_id.id) AS c;

19.
Составьте таблицу из полей:
name_of_fund — название фонда;
name_of_company — название компании;
amount — сумма инвестиций, которую привлекла компания в раунде.
В таблицу войдут данные о компаниях, в истории которых было больше шести важных этапов, а раунды финансирования проходили с 2012 по 2013 год включительно.
Выполнение:

SELECT f.name AS name_of_fund,
       c.name AS name_of_company,
       fr.raised_amount AS amount
FROM fund AS f
INNER JOIN investment AS i ON f.id=i.fund_id
INNER JOIN company AS c ON c.id=i.company_id
INNER JOIN funding_round AS fr ON fr.id=i.funding_round_id
WHERE c.milestones > 6
  AND EXTRACT(YEAR FROM CAST(fr.funded_at AS date)) BETWEEN 2012 AND 2013;

20.
Выгрузите таблицу, в которой будут такие поля:
название компании-покупателя;
сумма сделки;
название компании, которую купили;
сумма инвестиций, вложенных в купленную компанию;
доля, которая отображает, во сколько раз сумма покупки превысила сумму вложенных в компанию инвестиций, округлённая до ближайшего целого числа.
Не учитывайте те сделки, в которых сумма покупки равна нулю. Если сумма инвестиций в компанию равна нулю, исключите такую компанию из таблицы.
Отсортируйте таблицу по сумме сделки от большей к меньшей, а затем по названию купленной компании в лексикографическом порядке. Ограничьте таблицу первыми десятью записями.
Выполнение:

WITH

ed AS (SELECT id,
       name AS acquired_company,
       funding_total
FROM company
WHERE id IN (SELECT acquired_company_id
             FROM acquisition)
  AND funding_total <> 0),

ing AS (SELECT id,
       name AS acquiring_company
FROM company
WHERE id IN (SELECT acquiring_company_id
             FROM acquisition))
             
SELECT ing.acquiring_company,
       a.price_amount,
       ed.acquired_company,
       ed.funding_total,
       ROUND(a.price_amount/ed.funding_total)
       
FROM acquisition AS a
FULL OUTER JOIN ing ON ing.id=a.acquiring_company_id
INNER JOIN ed ON ed.id=a.acquired_company_id
WHERE a.price_amount <> 0
ORDER BY price_amount DESC, acquired_company
LIMIT 10;

21.
Выгрузите таблицу, в которую войдут названия компаний из категории social, получившие финансирование с 2010 по 2013 год включительно. Проверьте, что сумма инвестиций не равна нулю. Выведите также номер месяца, в котором проходил раунд финансирования.
Выполнение:

SELECT c.name,
       EXTRACT(MONTH FROM CAST(fr.funded_at AS date)) AS month
FROM
(SELECT *
FROM company
WHERE category_code = 'social') AS c JOIN
(SELECT *
FROM funding_round
WHERE raised_amount != 0
    AND EXTRACT(YEAR FROM CAST(funded_at AS date)) BETWEEN 2010 AND 2013) AS fr
ON c.id=fr.company_id;


22.
Отберите данные по месяцам с 2010 по 2013 год, когда проходили инвестиционные раунды. Сгруппируйте данные по номеру месяца и получите таблицу, в которой будут поля:
номер месяца, в котором проходили раунды;
количество уникальных названий фондов из США, которые инвестировали в этом месяце;
количество компаний, купленных за этот месяц;
общая сумма сделок по покупкам в этом месяце.
Выполнение:

WITH

f AS (SELECT EXTRACT(MONTH FROM CAST(f_r.funded_at AS date)) AS month,
       COUNT(DISTINCT ff.name) AS count_funds
      FROM fund AS ff
      LEFT OUTER JOIN investment AS ii ON ff.id=ii.fund_id
      LEFT OUTER JOIN funding_round AS f_r ON f_r.id=ii.funding_round_id
      WHERE ff.country_code LIKE 'USA'
        AND (EXTRACT(YEAR FROM CAST(f_r.funded_at AS date)) BETWEEN 2010 AND 2013)
      GROUP BY month),

c AS (SELECT EXTRACT(MONTH FROM CAST(acquired_at AS date)) AS month,
       COUNT(acquired_company_id) AS count_companies,
       SUM(price_amount) AS sum_payments
FROM acquisition
WHERE EXTRACT(YEAR FROM CAST(acquired_at AS date)) BETWEEN 2010 AND 2013
GROUP BY month)

SELECT f.month,
       f.count_funds,
       c.count_companies,
       c.sum_payments
FROM f INNER JOIN c ON f.month=c.month;

23.
Составьте сводную таблицу и выведите среднюю сумму инвестиций для стран, в которых есть стартапы, зарегистрированные в 2011, 2012 и 2013 годах. Данные за каждый год должны быть в отдельном поле. Отсортируйте таблицу по среднему значению инвестиций за 2011 год от большего к меньшему.
Выполнение:

WITH

c AS (SELECT DISTINCT country_code AS country
      FROM company
      WHERE EXTRACT(YEAR FROM CAST(founded_at AS date)) BETWEEN 2011 AND 2013),

a_2011 AS (SELECT country_code AS country,
       AVG(funding_total) AS avg_2011
    FROM company
    WHERE EXTRACT(YEAR FROM CAST(founded_at AS date)) = 2011
    GROUP BY country),
    
a_2012 AS (SELECT country_code AS country,
       AVG(funding_total) AS avg_2012
    FROM company
    WHERE EXTRACT(YEAR FROM CAST(founded_at AS date)) = 2012
    GROUP BY country),

a_2013 AS (SELECT country_code AS country,
       AVG(funding_total) AS avg_2013
    FROM company
    WHERE EXTRACT(YEAR FROM CAST(founded_at AS date)) = 2013
    GROUP BY country)
    
SELECT c.country,
       a_2011.avg_2011,
       a_2012.avg_2012,
       a_2013.avg_2013
FROM c
INNER JOIN a_2011 ON c.country=a_2011.country
INNER JOIN a_2012 ON c.country=a_2012.country
INNER JOIN a_2013 ON c.country=a_2013.country
ORDER BY  a_2011.avg_2011 DESC;
